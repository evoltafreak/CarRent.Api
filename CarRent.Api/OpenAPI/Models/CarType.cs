/*
 * OpenAPI car rent
 *
 * car rent api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenAPI.Converters;

namespace OpenAPI.Models
{ 
    /// <summary>
    /// A car type class
    /// </summary>
    [DataContract]
    public class CarType : IEquatable<CarType>
    {
        /// <summary>
        /// Gets or Sets IdCarType
        /// </summary>
        [DataMember(Name="idCarType", EmitDefaultValue=false)]
        public long IdCarType { get; set; }

        /// <summary>
        /// Gets or Sets _CarType
        /// </summary>
        [DataMember(Name="carType", EmitDefaultValue=false)]
        public string _CarType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarType {\n");
            sb.Append("  IdCarType: ").Append(IdCarType).Append("\n");
            sb.Append("  _CarType: ").Append(_CarType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CarType)obj);
        }

        /// <summary>
        /// Returns true if CarType instances are equal
        /// </summary>
        /// <param name="other">Instance of CarType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdCarType == other.IdCarType ||
                    
                    IdCarType.Equals(other.IdCarType)
                ) && 
                (
                    _CarType == other._CarType ||
                    _CarType != null &&
                    _CarType.Equals(other._CarType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IdCarType.GetHashCode();
                    if (_CarType != null)
                    hashCode = hashCode * 59 + _CarType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CarType left, CarType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CarType left, CarType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
