/*
 * OpenAPI car rent
 *
 * car rent api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenAPI.Converters;

namespace OpenAPI.Models
{ 
    /// <summary>
    /// A customer
    /// </summary>
    [DataContract]
    public class Customer : IEquatable<Customer>
    {
        /// <summary>
        /// Gets or Sets IdCustomer
        /// </summary>
        [DataMember(Name="idCustomer", EmitDefaultValue=false)]
        public long IdCustomer { get; set; }

        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets AddressNr
        /// </summary>
        [DataMember(Name="addressNr", EmitDefaultValue=false)]
        public string AddressNr { get; set; }

        /// <summary>
        /// Gets or Sets Place
        /// </summary>
        [DataMember(Name="place", EmitDefaultValue=false)]
        public Place Place { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  IdCustomer: ").Append(IdCustomer).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressNr: ").Append(AddressNr).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Customer)obj);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdCustomer == other.IdCustomer ||
                    
                    IdCustomer.Equals(other.IdCustomer)
                ) && 
                (
                    Firstname == other.Firstname ||
                    Firstname != null &&
                    Firstname.Equals(other.Firstname)
                ) && 
                (
                    Lastname == other.Lastname ||
                    Lastname != null &&
                    Lastname.Equals(other.Lastname)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    AddressNr == other.AddressNr ||
                    AddressNr != null &&
                    AddressNr.Equals(other.AddressNr)
                ) && 
                (
                    Place == other.Place ||
                    Place != null &&
                    Place.Equals(other.Place)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IdCustomer.GetHashCode();
                    if (Firstname != null)
                    hashCode = hashCode * 59 + Firstname.GetHashCode();
                    if (Lastname != null)
                    hashCode = hashCode * 59 + Lastname.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (AddressNr != null)
                    hashCode = hashCode * 59 + AddressNr.GetHashCode();
                    if (Place != null)
                    hashCode = hashCode * 59 + Place.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Customer left, Customer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Customer left, Customer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
