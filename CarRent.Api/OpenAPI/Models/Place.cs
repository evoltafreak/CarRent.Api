/*
 * OpenAPI car rent
 *
 * car rent api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenAPI.Converters;

namespace OpenAPI.Models
{ 
    /// <summary>
    /// A place class
    /// </summary>
    [DataContract]
    public class Place : IEquatable<Place>
    {
        /// <summary>
        /// Gets or Sets IdPlace
        /// </summary>
        [DataMember(Name="idPlace", EmitDefaultValue=false)]
        public long IdPlace { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets _Place
        /// </summary>
        [DataMember(Name="place", EmitDefaultValue=false)]
        public string _Place { get; set; }

        /// <summary>
        /// Gets or Sets Canton
        /// </summary>
        [DataMember(Name="canton", EmitDefaultValue=false)]
        public string Canton { get; set; }

        /// <summary>
        /// Gets or Sets CantonAbb
        /// </summary>
        [DataMember(Name="cantonAbb", EmitDefaultValue=false)]
        public string CantonAbb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Place {\n");
            sb.Append("  IdPlace: ").Append(IdPlace).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  _Place: ").Append(_Place).Append("\n");
            sb.Append("  Canton: ").Append(Canton).Append("\n");
            sb.Append("  CantonAbb: ").Append(CantonAbb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Place)obj);
        }

        /// <summary>
        /// Returns true if Place instances are equal
        /// </summary>
        /// <param name="other">Instance of Place to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Place other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdPlace == other.IdPlace ||
                    
                    IdPlace.Equals(other.IdPlace)
                ) && 
                (
                    ZipCode == other.ZipCode ||
                    ZipCode != null &&
                    ZipCode.Equals(other.ZipCode)
                ) && 
                (
                    _Place == other._Place ||
                    _Place != null &&
                    _Place.Equals(other._Place)
                ) && 
                (
                    Canton == other.Canton ||
                    Canton != null &&
                    Canton.Equals(other.Canton)
                ) && 
                (
                    CantonAbb == other.CantonAbb ||
                    CantonAbb != null &&
                    CantonAbb.Equals(other.CantonAbb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IdPlace.GetHashCode();
                    if (ZipCode != null)
                    hashCode = hashCode * 59 + ZipCode.GetHashCode();
                    if (_Place != null)
                    hashCode = hashCode * 59 + _Place.GetHashCode();
                    if (Canton != null)
                    hashCode = hashCode * 59 + Canton.GetHashCode();
                    if (CantonAbb != null)
                    hashCode = hashCode * 59 + CantonAbb.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Place left, Place right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Place left, Place right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
